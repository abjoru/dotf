#!/bin/bash
#
# dotf

set -e 

MODE="install"
VERBOSE=false

SCALA_VERSION=2.13

AMM_VERSION=2.1.4
AMM_RELEASE_VERSION="${SCALA_VERSION}-${AMM_VERSION}-2-ef9b0a0"
AMM_URL="https://github.com/lihaoyi/Ammonite/releases/download/${AMM_VERSION}/${AMM_RELEASE_VERSION}"

SC_DIR=${XDG_DATA_HOME:-~/.local/share}/dotf

displayUsageAndExit() {
  echo "dotf -- dotfiles management"
  echo
  echo "Usage: dotf [options] <cmd>"
  echo
  echo "Options:"
  echo "  -d  Dry run a command"
  echo "  -v  Verbose output for a command"
  echo "  -h  Display this help"
  echo
  echo "Commands:"
  echo "  list [<action>]   list managed files"
  echo "  update            update managed files"
  echo "  upgrade           upgrade managed packages and settings"
  echo "  sync <branch>     sync current branch with some other branch using no fastforward and no commit"
  echo "  homepage          build/re-build homepage"
  echo "  *                 delegates to git commands"
  echo
  echo "Actions:"
  echo "  pkgs      list all packages"
  echo "  warn      list all warnings"
  echo "  custom    list all custom installers"
  echo "  tracked   list all tracked files"
  echo "  untracked list all untracked files in established parent dirs"
  exit
}

dotfConfig() {
  $(which git) --git-dir=$HOME/.dotf/ --work-tree=$HOME $@
}

checkJava() {
  if [ ! -x "$(command -v java)" ]; then
    echo "ERROR: missing java runtime!"
    echo 
    echo "Please install a Java runtime environment before running this program"
    exit 1
  fi
}

initAmmonite() {
  # Check for curl
  if [ ! -x "$(command -v curl)" ]; then
    if [[ "$OSTYPE" == "darwin"* ]]; then
      brew install curl
    elif [[ "$OSTYPE" == "linux-gnu"* && -x "$(which apt)" ]]; then
      sudo apt install curl
    elif [[ "$OSTYPE" == "linux-gnu"* && -x "$(which pacman)" ]]; then
      sudo pacman -S curl
    else
      echo "Unsupported OS or package system!"
      echo "Currently supported:"
      echo "  - apt (linux)"
      echo "  - pacman (linux)"
      echo "  - homebrew (osx)"
      exit 1
    fi
  fi

  # Check for Ammonite
  if [ ! -x "$(command -v amm)" ]; then
    curl -L "${AMM_URL}" > $HOME/.local/bin/amm && chmod +x $HOME/.local/bin/amm
  fi
}

invalidCommand() {
  echo "Invalid Command!"
  displayUsageAndExit
}

runList() {
  amm ${SC_DIR}/cmd_list.sc "$1"
  exit
}

runUpdate() {
  pushd $HOME
  if [ "$1" == "dry" ]; then
    dotfConfig fetch
    dotfConfig diff HEAD..@{u}
  else
    dotfConfig pull
  fi
  popd
  exit
}

runUpgrade() {
  amm ${SC_DIR}/cmd_upgrade.sc "$1" "$2"
  #TODO don't execute on `dry` mode...
  if [ "$1" == "install" ]; then
    runOsInstall
  fi
  exit
}

runSync() {
  # TODO verify that source/target branch is not the same!
  if [ "$1" == "dry" ]; then
    echo "dotf merge --no-ff --no-commit $2"
  else
    dotfConfig merge --no-ff --no-commit "$2"
  fi
  exit
}

runOsInstall() {
  # Run os installs if not already done..
  if [ ! -d "${XDG_CACHE_HOME:-$HOME/.cache}/dotf/.locked" ]; then
    if [[ "$OSTYPE" == "darwin"* ]]; then
      bash ${XDG_DATA_HOME:-$HOME/.local/share}/dotf/os/osx-setup.sh
    elif [[ "$OSTYPE" == "linux-gnu"* ]]; then
      bash ${XDG_DATA_HOME:-$HOME/.local/share}/dotf/os/linux-setup.sh
    fi

    # Write update lock file to avoid running os installs again
    touch ${XDG_CACHE_HOME:-$HOME/.cache}/dotf/.locked
  fi
  exit
}

buildHomepage() {
  amm ${SC_DIR}/cmd_homepage.sc
  echo "Homepage generation complete!"
  exit
}

# Verify that we have a JRE
checkJava

# Initialize up front
initAmmonite

while getopts ':dvh' opts; do
  case $opts in
    d) MODE="dry" ;;
    v) VERBOSE=true ;;
    h) displayUsageAndExit ;;
  esac
done

shift $((OPTIND-1))

case $1 in
  list) runList "$2" ;;
  update) runUpdate "$MODE" "$VERBOSE" ;;
  upgrade) runUpgrade "$MODE" "$VERBOSE" ;;
  sync) runSync "$MODE" "$2" ;;
  homepage) buildHomepage ;;
  *) dotfConfig $@ ;;
esac
